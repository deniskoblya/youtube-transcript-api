#!/usr/bin/env python3
"""
YouTube Transcript API –¥–ª—è Railway
"""

from youtube_transcript_api import YouTubeTranscriptApi
from flask import Flask, request, jsonify
from flask_cors import CORS
import os

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

@app.route('/transcript', methods=['GET'])
def get_transcript():
    video_id = request.args.get('video_id')
    lang = request.args.get('lang', 'en')
    
    print(f"\nüîç –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: video_id={video_id}, lang={lang}")
    
    if not video_id:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç video_id")
        return jsonify({'error': 'video_id is required'}), 400
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API - —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        api = YouTubeTranscriptApi()
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏
        languages_to_try = [lang, 'en', 'ru', 'es', 'fr', 'de']
        
        for try_lang in languages_to_try:
            try:
                print(f"üéØ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –Ω–∞ —è–∑—ã–∫–µ: {try_lang}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ fetch —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º
                segments = api.fetch(video_id, languages=[try_lang])
                
                if segments and len(segments) > 0:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–∞ —è–∑—ã–∫–µ {try_lang}: {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                    
                    result = []
                    for seg in segments:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
                        if hasattr(seg, 'text'):
                            result.append({
                                "start": seg.start,
                                "duration": getattr(seg, "duration", 0),
                                "text": seg.text
                            })
                        else:
                            result.append({
                                "start": seg.get("start", 0),
                                "duration": seg.get("duration", 0),
                                "text": seg.get("text", "")
                            })
                    
                    print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(result)} –∑–∞–ø–∏—Å–µ–π")
                    return jsonify(result)
                    
            except Exception as lang_error:
                print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {try_lang}: {type(lang_error).__name__}: {lang_error}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —è–∑—ã–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞
        try:
            print("üéØ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
            segments = api.fetch(video_id)
            
            if segments and len(segments) > 0:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è (–∞–≤—Ç–æ–≤—ã–±–æ—Ä): {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                
                result = []
                for seg in segments:
                    if hasattr(seg, 'text'):
                        result.append({
                            "start": seg.start,
                            "duration": getattr(seg, "duration", 0),
                            "text": seg.text
                        })
                    else:
                        result.append({
                            "start": seg.get("start", 0),
                            "duration": seg.get("duration", 0),
                            "text": seg.get("text", "")
                        })
                
                return jsonify(result)
        except Exception as auto_error:
            print(f"‚ö†Ô∏è  –ê–≤—Ç–æ–≤—ã–±–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {auto_error}")
        
        print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ")
        return jsonify([])
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': str(e)})

@app.route('/health', methods=['GET'])
def health():
    return jsonify({'status': 'ok'})

@app.route('/', methods=['GET'])
def home():
    return jsonify({
        'name': 'YouTube Transcript API',
        'version': '1.0.0',
        'endpoints': {
            '/health': 'Health check',
            '/transcript': 'Get video transcript (params: video_id, lang)'
        },
        'example': '/transcript?video_id=dQw4w9WgXcQ&lang=ru'
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Transcript API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print("üìù –ü—Ä–∏–º–µ—Ä: /transcript?video_id=r45n3Jsqu6o&lang=ru")
    app.run(host='0.0.0.0', port=port, debug=False)